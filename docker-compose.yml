# docker-compose.yml (Updated for new structure)
version: '3.8'

services:
  app:
    build:
      context: ./adaMedical_App # Build context is now the adaMedical_App directory
      dockerfile: ../Dockerfile   # Path to Dockerfile relative to the context
    container_name: business-api-app
    ports:
      - "5000:8000" # Host:Container (maps host port 5000 to Gunicorn port 8000 in container)
    env_file:
      - .env # Load environment variables from .env file in the project root
    environment:
      # You can override or add specific environment variables here if needed
      # For example, to ensure development mode for local compose if .env might have production:
      - FLASK_ENV=development
      # The SQLALCHEMY_DATABASE_URI in .env should point to the 'db' service name for Docker Compose
      # e.g., SQLALCHEMY_DATABASE_URI=mysql+mysqlclient://${MYSQL_USER:-user}:${MYSQL_PASSWORD:-password}@db:3306/${MYSQL_DATABASE:-appdb}
    volumes:
      - ./adaMedical_App:/app # Mounts adaMedical_App directory to /app in container for live code reloading
    depends_on:
      db:
        condition: service_healthy # Wait for DB to be ready before starting app
    command: gunicorn --bind 0.0.0.0:8000 --workers 1 --reload "app:create_app()"

  db:
    image: mysql:8.0
    container_name: business-api-db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword} # From .env or default
      MYSQL_DATABASE: ${MYSQL_DATABASE:-appdb}               # From .env or default
      MYSQL_USER: ${MYSQL_USER:-user}                         # From .env or default
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-password}             # From .env or default
    ports:
      # Expose MySQL on host port 3307 to avoid conflict if local MySQL runs on 3306
      # Change if 3307 is in use on your host.
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql # Persist database data
    healthcheck:
      # Test command ensures mysql user can connect. Uses env vars for credentials.
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u$${MYSQL_USER}", "-p$${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 10s # Increased timeout slightly
      retries: 5
      start_period: 30s # Give MySQL more time to initialize before first health check

volumes:
  mysql_data: # Defines the named volume for data persistence